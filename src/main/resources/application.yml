# 공통 설정
spring:
  application:
    name: elderberry
  profiles:
    active: dev
  
  # 데이터베이스 설정
  datasource:
    url: jdbc:h2:file:./data/elderberry;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  # H2 콘솔 설정
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true
  
  # 캐시 설정
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=1h
  
  # 비동기 작업 설정 (Context7 모범사례 적용)
  task:
    execution:
      pool:
        core-size: 5
        max-size: 15
        queue-capacity: 100
        keep-alive: "60s"
      thread-name-prefix: "async-task-"
    scheduling:
      pool:
        size: 3
      thread-name-prefix: "scheduling-"

  # JSON 설정
  jackson:
    property-naming-strategy: SNAKE_CASE
    default-property-inclusion: NON_NULL

# 서버 설정
server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# 로깅 설정
logging:
  level:
    com.globalcarelink: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web.reactive.function.client: DEBUG
    reactor.netty.http.client: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# JWT 설정
jwt:
  secret: elderberry-jwt-secret-key-for-development-only-change-in-production
  access-token-expiration: 3600000  # 1시간
  refresh-token-expiration: 86400000 # 24시간

# 애플리케이션 설정
app:
  # 공공데이터 API 설정
  public-data:
    api-key: CCXHQiSSQ0J+RRaadSjmmS7ltxG/tlSVOYMjh45MmGne68ptgGAaAJVJti8nBazSjLemTAyb5gAuj43xq7fTog==
    base-url: https://apis.data.go.kr
    connect-timeout: 10000    # 10초
    read-timeout: 30000       # 30초
    write-timeout: 10000      # 10초
    max-memory-size: 1048576  # 1MB
    
    # API 호출 제한 설정
    rate-limit:
      requests-per-minute: 1000
      requests-per-hour: 10000
      requests-per-day: 100000
    
    # 재시도 설정
    retry:
      max-attempts: 3
      backoff-delay: 1000     # 1초
      backoff-multiplier: 2
    
    # 캐시 설정
    cache:
      ltci-search-ttl: 3600   # 1시간
      ltci-detail-ttl: 7200   # 2시간
      hospital-search-ttl: 3600
      pharmacy-search-ttl: 3600
      facility-status-ttl: 1800  # 30분
      entrance-visa-ttl: 7200    # 2시간 (입국허가요건은 자주 변경되지 않음)
      custom-visa-ttl: 3600      # 1시간 (맞춤형 정보는 좀 더 짧게)
  
  # 스케줄러 설정
  scheduler:
    # 시설 정보 동기화 스케줄 (매일 새벽 2시)
    facility-sync-cron: "0 0 2 * * ?"
    
    # API 상태 체크 스케줄 (매 10분)
    health-check-cron: "0 */10 * * * ?"
    
    # 통계 업데이트 스케줄 (매 시간)
    statistics-update-cron: "0 0 * * * ?"
  
  # 비동기 처리 설정 (기존 + 새로운 스레드 풀 설정 추가)
  async:
    core-pool-size: 5
    max-pool-size: 20
    queue-capacity: 100
    thread-name-prefix: "elderberry-async-"
    
    # 공공데이터 전용 스레드 풀
    public-data:
      core-pool-size: 3
      max-pool-size: 10
      queue-capacity: 50
      thread-name-prefix: "public-data-"
    
    # 새로 추가된 전용 스레드 풀들 (AsyncConfig Bean과 연동)
    # 스케줄러 전용 (schedulerTaskExecutor)
    scheduler:
      core-pool-size: 3
      max-pool-size: 8
      queue-capacity: 50
      keep-alive-seconds: 60
      thread-name-prefix: "scheduler-"
      
    # DB 작업 전용 (dbTaskExecutor) 
    database:
      core-pool-size: 4
      max-pool-size: 10
      queue-capacity: 200
      keep-alive-seconds: 120
      thread-name-prefix: "db-task-"
      
    # 외부 API 호출 전용 (apiTaskExecutor)
    api:
      core-pool-size: 6
      max-pool-size: 20
      queue-capacity: 100
      keep-alive-seconds: 30
      thread-name-prefix: "api-task-"
      
    # 통계 및 분석 전용 (statisticsExecutor)
    statistics:
      core-pool-size: 2
      max-pool-size: 6
      queue-capacity: 300
      keep-alive-seconds: 180
      thread-name-prefix: "stats-"

# 관리 및 모니터링 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,caches,scheduledtasks
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      simple:
        enabled: true

---
# 개발 환경 설정
spring:
  config:
    activate:
      on-profile: dev
  
  # 개발 환경 로깅
  logging:
    level:
      com.globalcarelink: DEBUG
      org.springframework.web.reactive.function.client: DEBUG

# 개발 환경 공공데이터 API 설정
app:
  public-data:
    # 개발 환경에서는 더 관대한 설정
    connect-timeout: 15000
    read-timeout: 45000
    
    # 개발 환경 API 호출 제한
    rate-limit:
      requests-per-minute: 100
      requests-per-hour: 1000
      requests-per-day: 10000

---
# 운영 환경 설정
spring:
  config:
    activate:
      on-profile: prod
  
  # 운영 환경 데이터베이스 (SQLite)
  datasource:
    url: jdbc:sqlite:./data/elderberry.db
    driver-class-name: org.sqlite.JDBC
  
  # 운영 환경 로깅
  logging:
    level:
      com.globalcarelink: INFO
      org.springframework.web.reactive.function.client: WARN

# 운영 환경 공공데이터 API 설정
app:
  public-data:
    # 운영 환경에서는 더 엄격한 설정
    connect-timeout: 8000
    read-timeout: 20000
    
    # 운영 환경 API 호출 제한
    rate-limit:
      requests-per-minute: 500
      requests-per-hour: 5000
      requests-per-day: 50000

---
# 테스트 환경 설정
spring:
  config:
    activate:
      on-profile: test
  
  # 테스트 환경 데이터베이스 (메모리)
  datasource:
    url: jdbc:h2:mem:testdb
  
  jpa:
    hibernate:
      ddl-auto: create-drop

# 테스트 환경 공공데이터 API 설정
app:
  public-data:
    # 테스트 환경에서는 Mock 서버 사용
    base-url: http://localhost:8081
    connect-timeout: 5000
    read-timeout: 10000
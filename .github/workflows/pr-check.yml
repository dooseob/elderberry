name: Pull Request Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-title:
    name: PR Title Convention Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert
        requireScope: false
        subjectPattern: ^(?![A-Z]).+$
        subjectPatternError: |
          제목은 소문자로 시작해야 합니다.
          예: "feat: 새로운 기능 추가"

  check-conflicts:
    name: Check Merge Conflicts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for merge conflicts
      run: |
        git fetch origin ${{ github.base_ref }}
        git merge-base HEAD origin/${{ github.base_ref }}
        if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q '<<<<<<<'; then
          echo "Merge conflicts detected!"
          exit 1
        fi

  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check PR size
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const { data: prData } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number
          });
          
          if (prData.additions + prData.deletions > 1000) {
            core.warning(`이 PR은 너무 큽니다 (${prData.additions + prData.deletions} 줄). 작은 단위로 나누는 것을 고려해주세요.`);
          }
          
          if (prData.changed_files > 50) {
            core.warning(`이 PR은 너무 많은 파일을 수정합니다 (${prData.changed_files} 파일). 작은 단위로 나누는 것을 고려해주세요.`);
          }

  label-pr:
    name: Auto Label PR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: Label PR based on files changed
      uses: actions/labeler@v5
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        configuration-path: .github/labeler.yml

  check-todos:
    name: Check TODOs
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for TODOs
      run: |
        TODO_COUNT=$(grep -r "TODO\|FIXME\|HACK\|XXX" --include="*.java" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | wc -l || true)
        if [ "$TODO_COUNT" -gt "0" ]; then
          echo "Found $TODO_COUNT TODO/FIXME/HACK/XXX comments"
          grep -r "TODO\|FIXME\|HACK\|XXX" --include="*.java" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . || true
        fi

  auto-assign:
    name: Auto Assign Reviewers
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      
    steps:
    - name: Auto assign reviewers
      uses: kentaro-m/auto-assign-action@v2.0.0
      with:
        configuration-path: .github/auto-assign.yml
package com.globalcarelink.agents.documentation.generators;

import com.globalcarelink.agents.documentation.models.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.*;

/**
 * OpenAPI 문서 생성기
 */
@Slf4j
@Component
public class OpenAPIGenerator {
    
    /**
     * 개별 엔드포인트 문서 생성
     */
    public ApiDocumentation generateForEndpoint(ApiEndpoint endpoint) {
        log.debug("엔드포인트 문서 생성: {}", endpoint.getEndpointId());
        
        Map<String, Object> openApiSpec = new HashMap<>();
        
        // OpenAPI 3.0 스펙 생성
        openApiSpec.put("openapi", "3.0.3");
        openApiSpec.put("info", createApiInfo(endpoint));
        openApiSpec.put("paths", createPaths(Arrays.asList(endpoint)));
        openApiSpec.put("components", createComponents(Arrays.asList(endpoint)));
        
        String content = generateMarkdownContent(endpoint);
        
        return ApiDocumentation.builder()
            .documentationId(UUID.randomUUID().toString())
            .title(endpoint.getSummary() + " API Documentation")
            .description("API 엔드포인트: " + endpoint.getHttpMethod() + " " + endpoint.getPath())
            .version("1.0.0")
            .format("OPENAPI")
            .content(content)
            .structuredContent(openApiSpec)
            .generatedAt(LocalDateTime.now())
            .lastUpdated(LocalDateTime.now())
            .generatedBy("OpenAPIGenerator")
            .autoGenerated(true)
            .build();
    }
    
    /**
     * 여러 엔드포인트 통합 문서 생성
     */
    public ApiDocumentation generateDocumentation(Collection<ApiEndpoint> endpoints, String format) {
        log.info("API 문서 생성 중: {}개 엔드포인트, {} 형식", endpoints.size(), format);
        
        return switch (format.toUpperCase()) {
            case "OPENAPI" -> generateOpenAPIDocumentation(endpoints);
            case "MARKDOWN" -> generateMarkdownDocumentation(endpoints);
            case "HTML" -> generateHtmlDocumentation(endpoints);
            default -> generateOpenAPIDocumentation(endpoints);
        };
    }
    
    /**
     * OpenAPI 3.0 문서 생성
     */
    private ApiDocumentation generateOpenAPIDocumentation(Collection<ApiEndpoint> endpoints) {
        Map<String, Object> openApiSpec = new HashMap<>();
        
        // 기본 정보
        openApiSpec.put("openapi", "3.0.3");
        openApiSpec.put("info", createGlobalApiInfo());
        openApiSpec.put("servers", createServers());
        openApiSpec.put("paths", createPaths(endpoints));
        openApiSpec.put("components", createComponents(endpoints));
        openApiSpec.put("security", createGlobalSecurity());
        openApiSpec.put("tags", createTags(endpoints));
        
        return ApiDocumentation.builder()
            .documentationId(UUID.randomUUID().toString())
            .title("API Documentation")
            .description("엘더베리 프로젝트 API 문서")
            .version("1.0.0")
            .format("OPENAPI")
            .structuredContent(openApiSpec)
            .generatedAt(LocalDateTime.now())
            .generatedBy("OpenAPIGenerator")
            .autoGenerated(true)
            .build();
    }
    
    /**
     * Markdown 문서 생성
     */
    private ApiDocumentation generateMarkdownDocumentation(Collection<ApiEndpoint> endpoints) {
        StringBuilder markdown = new StringBuilder();
        
        // 헤더
        markdown.append("# API Documentation\n\n");
        markdown.append("엘더베리 프로젝트 API 문서\n\n");
        markdown.append("**생성일**: ").append(LocalDateTime.now()).append("\n\n");
        
        // 목차
        markdown.append("## 목차\n\n");
        for (ApiEndpoint endpoint : endpoints) {
            markdown.append("- [").append(endpoint.getSummary()).append("](#")
                    .append(endpoint.getEndpointId().toLowerCase()).append(")\n");
        }
        markdown.append("\n");
        
        // 각 엔드포인트 문서화
        for (ApiEndpoint endpoint : endpoints) {
            markdown.append(generateEndpointMarkdown(endpoint));
        }
        
        return ApiDocumentation.builder()
            .documentationId(UUID.randomUUID().toString())
            .title("API Documentation (Markdown)")
            .description("Markdown 형태의 API 문서")
            .version("1.0.0")
            .format("MARKDOWN")
            .content(markdown.toString())
            .generatedAt(LocalDateTime.now())
            .generatedBy("OpenAPIGenerator")
            .autoGenerated(true)
            .build();
    }
    
    /**
     * HTML 문서 생성
     */
    private ApiDocumentation generateHtmlDocumentation(Collection<ApiEndpoint> endpoints) {
        StringBuilder html = new StringBuilder();
        
        html.append("<!DOCTYPE html>\n");
        html.append("<html>\n<head>\n");
        html.append("<title>API Documentation</title>\n");
        html.append("<style>\n");
        html.append(getDefaultCSS());
        html.append("</style>\n");
        html.append("</head>\n<body>\n");
        
        html.append("<h1>API Documentation</h1>\n");
        html.append("<p>엘더베리 프로젝트 API 문서</p>\n");
        
        for (ApiEndpoint endpoint : endpoints) {
            html.append(generateEndpointHtml(endpoint));
        }
        
        html.append("</body>\n</html>");
        
        return ApiDocumentation.builder()
            .documentationId(UUID.randomUUID().toString())
            .title("API Documentation (HTML)")
            .description("HTML 형태의 API 문서")
            .version("1.0.0")
            .format("HTML")
            .content(html.toString())
            .generatedAt(LocalDateTime.now())
            .generatedBy("OpenAPIGenerator")
            .autoGenerated(true)
            .build();
    }
    
    // Helper methods for OpenAPI generation
    
    private Map<String, Object> createApiInfo(ApiEndpoint endpoint) {
        Map<String, Object> info = new HashMap<>();
        info.put("title", endpoint.getSummary() + " API");
        info.put("description", endpoint.getDescription());
        info.put("version", "1.0.0");
        return info;
    }
    
    private Map<String, Object> createGlobalApiInfo() {
        Map<String, Object> info = new HashMap<>();
        info.put("title", "엘더베리 API");
        info.put("description", "엘더베리 프로젝트의 REST API 문서");
        info.put("version", "1.0.0");
        info.put("contact", Map.of("name", "개발팀", "email", "dev@elderberry.com"));
        return info;
    }
    
    private List<Map<String, Object>> createServers() {
        return Arrays.asList(
            Map.of("url", "http://localhost:8080", "description", "개발 서버"),
            Map.of("url", "https://api.elderberry.com", "description", "운영 서버")
        );
    }
    
    private Map<String, Object> createPaths(Collection<ApiEndpoint> endpoints) {
        Map<String, Object> paths = new HashMap<>();
        
        for (ApiEndpoint endpoint : endpoints) {
            String path = endpoint.getPath();
            String method = endpoint.getHttpMethod().toLowerCase();
            
            Map<String, Object> pathItem = (Map<String, Object>) paths.computeIfAbsent(path, k -> new HashMap<>());
            pathItem.put(method, createOperation(endpoint));
        }
        
        return paths;
    }
    
    private Map<String, Object> createOperation(ApiEndpoint endpoint) {
        Map<String, Object> operation = new HashMap<>();
        
        operation.put("summary", endpoint.getSummary());
        operation.put("description", endpoint.getDescription());
        operation.put("tags", endpoint.getTags());
        
        // Parameters
        if (endpoint.getParameters() != null && !endpoint.getParameters().isEmpty()) {
            operation.put("parameters", createParametersSpec(endpoint.getParameters()));
        }
        
        // Request body
        if (endpoint.getRequestBody() != null) {
            operation.put("requestBody", createRequestBodySpec(endpoint.getRequestBody()));
        }
        
        // Responses
        operation.put("responses", createResponsesSpec(endpoint.getResponses()));
        
        // Security
        if (endpoint.isRequiresAuthentication()) {
            operation.put("security", Arrays.asList(Map.of("bearerAuth", Arrays.asList())));
        }
        
        return operation;
    }
    
    private List<Map<String, Object>> createParametersSpec(List<ApiParameter> parameters) {
        return parameters.stream()
            .map(param -> {
                Map<String, Object> paramSpec = new HashMap<>();
                paramSpec.put("name", param.getName());
                paramSpec.put("in", param.getLocation());
                paramSpec.put("required", param.isRequired());
                paramSpec.put("description", param.getDescription());
                paramSpec.put("schema", Map.of("type", param.getType()));
                if (param.getDefaultValue() != null) {
                    paramSpec.put("default", param.getDefaultValue());
                }
                return paramSpec;
            })
            .toList();
    }
    
    private Map<String, Object> createRequestBodySpec(ApiRequestBody requestBody) {
        Map<String, Object> spec = new HashMap<>();
        spec.put("required", requestBody.isRequired());
        spec.put("content", Map.of(
            requestBody.getContentType(), Map.of(
                "schema", Map.of("$ref", "#/components/schemas/" + requestBody.getSchema())
            )
        ));
        return spec;
    }
    
    private Map<String, Object> createResponsesSpec(Map<String, ApiResponse> responses) {
        Map<String, Object> spec = new HashMap<>();
        
        if (responses != null) {
            responses.forEach((code, response) -> {
                Map<String, Object> responseSpec = new HashMap<>();
                responseSpec.put("description", response.getDescription());
                if (response.getContentType() != null) {
                    responseSpec.put("content", Map.of(
                        response.getContentType(), Map.of(
                            "schema", Map.of("$ref", "#/components/schemas/" + response.getSchema())
                        )
                    ));
                }
                spec.put(code, responseSpec);
            });
        }
        
        return spec;
    }
    
    private Map<String, Object> createComponents(Collection<ApiEndpoint> endpoints) {
        Map<String, Object> components = new HashMap<>();
        
        // Security schemes
        components.put("securitySchemes", Map.of(
            "bearerAuth", Map.of(
                "type", "http",
                "scheme", "bearer",
                "bearerFormat", "JWT"
            )
        ));
        
        // Schemas (간단한 예시)
        Map<String, Object> schemas = new HashMap<>();
        schemas.put("ErrorResponse", Map.of(
            "type", "object",
            "properties", Map.of(
                "error", Map.of("type", "string"),
                "message", Map.of("type", "string"),
                "timestamp", Map.of("type", "string", "format", "date-time")
            )
        ));
        
        components.put("schemas", schemas);
        
        return components;
    }
    
    private List<Map<String, Object>> createGlobalSecurity() {
        return Arrays.asList(Map.of("bearerAuth", Arrays.asList()));
    }
    
    private List<Map<String, Object>> createTags(Collection<ApiEndpoint> endpoints) {
        Set<String> tagNames = new HashSet<>();
        endpoints.forEach(endpoint -> {
            if (endpoint.getTags() != null) {
                tagNames.addAll(endpoint.getTags());
            }
        });
        
        return tagNames.stream()
            .map(tag -> Map.of("name", tag, "description", tag + " 관련 API"))
            .toList();
    }
    
    // Markdown generation helpers
    
    private String generateMarkdownContent(ApiEndpoint endpoint) {
        StringBuilder md = new StringBuilder();
        
        md.append("# ").append(endpoint.getSummary()).append("\n\n");
        md.append("**Endpoint**: `").append(endpoint.getHttpMethod()).append(" ").append(endpoint.getPath()).append("`\n\n");
        md.append(endpoint.getDescription()).append("\n\n");
        
        if (endpoint.getParameters() != null && !endpoint.getParameters().isEmpty()) {
            md.append("## Parameters\n\n");
            for (ApiParameter param : endpoint.getParameters()) {
                md.append("- **").append(param.getName()).append("** (").append(param.getType()).append(")");
                if (param.isRequired()) md.append(" *required*");
                md.append(": ").append(param.getDescription()).append("\n");
            }
            md.append("\n");
        }
        
        return md.toString();
    }
    
    private String generateEndpointMarkdown(ApiEndpoint endpoint) {
        StringBuilder md = new StringBuilder();
        
        md.append("## ").append(endpoint.getSummary()).append(" {#").append(endpoint.getEndpointId().toLowerCase()).append("}\n\n");
        md.append("**Endpoint**: `").append(endpoint.getHttpMethod()).append(" ").append(endpoint.getPath()).append("`\n\n");
        md.append(endpoint.getDescription()).append("\n\n");
        
        return md.toString();
    }
    
    private String generateEndpointHtml(ApiEndpoint endpoint) {
        StringBuilder html = new StringBuilder();
        
        html.append("<div class=\"endpoint\">\n");
        html.append("<h2>").append(endpoint.getSummary()).append("</h2>\n");
        html.append("<p><strong>Endpoint:</strong> <code>").append(endpoint.getHttpMethod()).append(" ").append(endpoint.getPath()).append("</code></p>\n");
        html.append("<p>").append(endpoint.getDescription()).append("</p>\n");
        html.append("</div>\n\n");
        
        return html.toString();
    }
    
    private String getDefaultCSS() {
        return """
            body { font-family: Arial, sans-serif; margin: 40px; }
            .endpoint { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 5px; }
            code { background: #f4f4f4; padding: 2px 4px; border-radius: 3px; }
            h1, h2 { color: #333; }
            """;
    }
}
name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || (github.event_name == 'push' && contains(github.ref, 'rc'))
    environment:
      name: staging
      url: https://staging.elderberry.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/elderberry
          git pull origin main
          docker compose -f docker-compose.staging.yml pull
          docker compose -f docker-compose.staging.yml up -d
          docker system prune -f
          
    - name: Health check
      run: |
        sleep 30
        curl -f https://staging.elderberry.example.com/actuator/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    environment:
      name: production
      url: https://elderberry.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment
      uses: chrnorm/deployment-action@v2
      id: deployment
      with:
        token: ${{ github.token }}
        environment: production
        
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          cd /opt/elderberry
          git fetch --tags
          git checkout ${{ github.ref_name }}
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d --remove-orphans
          docker system prune -f
          
    - name: Health check
      run: |
        sleep 60
        curl -f https://elderberry.example.com/actuator/health || exit 1
        
    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ github.token }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}
        state: success
        
    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ github.token }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}
        state: failure
        
    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          cd /opt/elderberry
          git checkout $(git describe --tags --abbrev=0 HEAD^)
          docker compose -f docker-compose.prod.yml up -d
          
    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to production ${{ job.status }}
          Version: ${{ github.ref_name }}
          Actor: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}